<class><keyword> class </keyword><identifier> Main </identifier><symbol> { </symbol><subroutine_dec><keyword> function </keyword><keyword> void </keyword><identifier> main </identifier><symbol> ( </symbol><parameter_list /><symbol> ) </symbol><subroutine_body><symbol> { </symbol><var_dec><keyword> var </keyword><identifier> Array </identifier><identifier> a </identifier><symbol> ; </symbol></var_dec><var_dec><keyword> var </keyword><keyword> int </keyword><identifier> length </identifier><symbol> ; </symbol></var_dec><var_dec><keyword> var </keyword><keyword> int </keyword><identifier> i </identifier><symbol> , </symbol><identifier> sum </identifier><symbol> ; </symbol></var_dec><statements><let_statement><keyword> let </keyword><identifier> length </identifier><symbol> = </symbol><expression><term><identifier> Keyboard </identifier><symbol> . </symbol><identifier> readInt </identifier><symbol> ( </symbol><expression_list><expression><term><string_constant> "HOW MANY NUMBERS? " </string_constant></term></expression></expression_list><symbol> ) </symbol></term></expression><symbol> ; </symbol></let_statement><let_statement><keyword> let </keyword><identifier> a </identifier><symbol> = </symbol><expression><term><identifier> Array </identifier><symbol> . </symbol><identifier> new </identifier><symbol> ( </symbol><expression_list><expression><term><identifier> length </identifier></term></expression></expression_list><symbol> ) </symbol></term></expression><symbol> ; </symbol></let_statement><let_statement><keyword> let </keyword><identifier> i </identifier><symbol> = </symbol><expression><term><integer_constant> 0 </integer_constant></term></expression><symbol> ; </symbol></let_statement><while_statement><keyword> while </keyword><symbol> ( </symbol><expression><term><identifier> i </identifier></term><symbol> &lt; </symbol><term><identifier> length </identifier></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><let_statement><keyword> let </keyword><identifier> a </identifier><symbol> [ </symbol><expression><term><identifier> i </identifier></term></expression><symbol> ] </symbol><symbol> = </symbol><expression><term><identifier> Keyboard </identifier><symbol> . </symbol><identifier> readInt </identifier><symbol> ( </symbol><expression_list><expression><term><string_constant> "ENTER THE NEXT NUMBER: " </string_constant></term></expression></expression_list><symbol> ) </symbol></term></expression><symbol> ; </symbol></let_statement><let_statement><keyword> let </keyword><identifier> i </identifier><symbol> = </symbol><expression><term><identifier> i </identifier></term><symbol> + </symbol><term><integer_constant> 1 </integer_constant></term></expression><symbol> ; </symbol></let_statement></statements><symbol> } </symbol></while_statement><let_statement><keyword> let </keyword><identifier> i </identifier><symbol> = </symbol><expression><term><integer_constant> 0 </integer_constant></term></expression><symbol> ; </symbol></let_statement><let_statement><keyword> let </keyword><identifier> sum </identifier><symbol> = </symbol><expression><term><integer_constant> 0 </integer_constant></term></expression><symbol> ; </symbol></let_statement><while_statement><keyword> while </keyword><symbol> ( </symbol><expression><term><identifier> i </identifier></term><symbol> &lt; </symbol><term><identifier> length </identifier></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><let_statement><keyword> let </keyword><identifier> sum </identifier><symbol> = </symbol><expression><term><identifier> sum </identifier></term><symbol> + </symbol><term><identifier> a </identifier><symbol> [ </symbol><expression><term><identifier> i </identifier></term></expression><symbol> ] </symbol></term></expression><symbol> ; </symbol></let_statement><let_statement><keyword> let </keyword><identifier> i </identifier><symbol> = </symbol><expression><term><identifier> i </identifier></term><symbol> + </symbol><term><integer_constant> 1 </integer_constant></term></expression><symbol> ; </symbol></let_statement></statements><symbol> } </symbol></while_statement><do_statement><keyword> do </keyword><identifier> Output </identifier><symbol> . </symbol><identifier> printString </identifier><symbol> ( </symbol><expression_list><expression><term><string_constant> "THE AVERAGE IS: " </string_constant></term></expression></expression_list><symbol> ) </symbol><symbol> ; </symbol></do_statement><do_statement><keyword> do </keyword><identifier> Output </identifier><symbol> . </symbol><identifier> printInt </identifier><symbol> ( </symbol><expression_list><expression><term><identifier> sum </identifier></term><symbol> / </symbol><term><identifier> length </identifier></term></expression></expression_list><symbol> ) </symbol><symbol> ; </symbol></do_statement><do_statement><keyword> do </keyword><identifier> Output </identifier><symbol> . </symbol><identifier> println </identifier><symbol> ( </symbol><expression_list /><symbol> ) </symbol><symbol> ; </symbol></do_statement><return_statement><keyword> return </keyword><symbol> ; </symbol></return_statement></statements><symbol> } </symbol></subroutine_body></subroutine_dec><symbol> } </symbol></class>