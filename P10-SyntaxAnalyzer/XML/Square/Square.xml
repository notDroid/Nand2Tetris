<class><keyword> class </keyword><identifier> Square </identifier><symbol> { </symbol><class_var_dec><keyword> field </keyword><keyword> int </keyword><identifier> x </identifier><symbol> , </symbol><identifier> y </identifier><symbol> ; </symbol></class_var_dec><class_var_dec><keyword> field </keyword><keyword> int </keyword><identifier> size </identifier><symbol> ; </symbol></class_var_dec><subroutine_dec><keyword> constructor </keyword><identifier> Square </identifier><identifier> new </identifier><symbol> ( </symbol><parameter_list><keyword> int </keyword><identifier> Ax </identifier><symbol> , </symbol><keyword> int </keyword><identifier> Ay </identifier><symbol> , </symbol><keyword> int </keyword><identifier> Asize </identifier></parameter_list><symbol> ) </symbol><subroutine_body><symbol> { </symbol><statements><let_statement><keyword> let </keyword><identifier> x </identifier><symbol> = </symbol><expression><term><identifier> Ax </identifier></term></expression><symbol> ; </symbol></let_statement><let_statement><keyword> let </keyword><identifier> y </identifier><symbol> = </symbol><expression><term><identifier> Ay </identifier></term></expression><symbol> ; </symbol></let_statement><let_statement><keyword> let </keyword><identifier> size </identifier><symbol> = </symbol><expression><term><identifier> Asize </identifier></term></expression><symbol> ; </symbol></let_statement><do_statement><keyword> do </keyword><identifier> draw </identifier><symbol> ( </symbol><expression_list /><symbol> ) </symbol><symbol> ; </symbol></do_statement><return_statement><keyword> return </keyword><expression><term><keyword> this </keyword></term></expression><symbol> ; </symbol></return_statement></statements><symbol> } </symbol></subroutine_body></subroutine_dec><subroutine_dec><keyword> method </keyword><keyword> void </keyword><identifier> dispose </identifier><symbol> ( </symbol><parameter_list /><symbol> ) </symbol><subroutine_body><symbol> { </symbol><statements><do_statement><keyword> do </keyword><identifier> Memory </identifier><symbol> . </symbol><identifier> deAlloc </identifier><symbol> ( </symbol><expression_list><expression><term><keyword> this </keyword></term></expression></expression_list><symbol> ) </symbol><symbol> ; </symbol></do_statement><return_statement><keyword> return </keyword><symbol> ; </symbol></return_statement></statements><symbol> } </symbol></subroutine_body></subroutine_dec><subroutine_dec><keyword> method </keyword><keyword> void </keyword><identifier> draw </identifier><symbol> ( </symbol><parameter_list /><symbol> ) </symbol><subroutine_body><symbol> { </symbol><statements><do_statement><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><expression_list><expression><term><keyword> true </keyword></term></expression></expression_list><symbol> ) </symbol><symbol> ; </symbol></do_statement><do_statement><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><expression_list><expression><term><identifier> x </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term></expression><symbol> , </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression></expression_list><symbol> ) </symbol><symbol> ; </symbol></do_statement><return_statement><keyword> return </keyword><symbol> ; </symbol></return_statement></statements><symbol> } </symbol></subroutine_body></subroutine_dec><subroutine_dec><keyword> method </keyword><keyword> void </keyword><identifier> erase </identifier><symbol> ( </symbol><parameter_list /><symbol> ) </symbol><subroutine_body><symbol> { </symbol><statements><do_statement><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><expression_list><expression><term><keyword> false </keyword></term></expression></expression_list><symbol> ) </symbol><symbol> ; </symbol></do_statement><do_statement><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><expression_list><expression><term><identifier> x </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term></expression><symbol> , </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression></expression_list><symbol> ) </symbol><symbol> ; </symbol></do_statement><return_statement><keyword> return </keyword><symbol> ; </symbol></return_statement></statements><symbol> } </symbol></subroutine_body></subroutine_dec><subroutine_dec><keyword> method </keyword><keyword> void </keyword><identifier> incSize </identifier><symbol> ( </symbol><parameter_list /><symbol> ) </symbol><subroutine_body><symbol> { </symbol><statements><if_statement><keyword> if </keyword><symbol> ( </symbol><expression><term><symbol> ( </symbol><expression><term><symbol> ( </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> ) </symbol></term><symbol> &lt; </symbol><term><integer_constant> 254 </integer_constant></term></expression><symbol> ) </symbol></term><symbol> &amp; </symbol><term><symbol> ( </symbol><expression><term><symbol> ( </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> ) </symbol></term><symbol> &lt; </symbol><term><integer_constant> 510 </integer_constant></term></expression><symbol> ) </symbol></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><do_statement><keyword> do </keyword><identifier> erase </identifier><symbol> ( </symbol><expression_list /><symbol> ) </symbol><symbol> ; </symbol></do_statement><let_statement><keyword> let </keyword><identifier> size </identifier><symbol> = </symbol><expression><term><identifier> size </identifier></term><symbol> + </symbol><term><integer_constant> 2 </integer_constant></term></expression><symbol> ; </symbol></let_statement><do_statement><keyword> do </keyword><identifier> draw </identifier><symbol> ( </symbol><expression_list /><symbol> ) </symbol><symbol> ; </symbol></do_statement></statements><symbol> } </symbol></if_statement><return_statement><keyword> return </keyword><symbol> ; </symbol></return_statement></statements><symbol> } </symbol></subroutine_body></subroutine_dec><subroutine_dec><keyword> method </keyword><keyword> void </keyword><identifier> decSize </identifier><symbol> ( </symbol><parameter_list /><symbol> ) </symbol><subroutine_body><symbol> { </symbol><statements><if_statement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier> size </identifier></term><symbol> &gt; </symbol><term><integer_constant> 2 </integer_constant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><do_statement><keyword> do </keyword><identifier> erase </identifier><symbol> ( </symbol><expression_list /><symbol> ) </symbol><symbol> ; </symbol></do_statement><let_statement><keyword> let </keyword><identifier> size </identifier><symbol> = </symbol><expression><term><identifier> size </identifier></term><symbol> - </symbol><term><integer_constant> 2 </integer_constant></term></expression><symbol> ; </symbol></let_statement><do_statement><keyword> do </keyword><identifier> draw </identifier><symbol> ( </symbol><expression_list /><symbol> ) </symbol><symbol> ; </symbol></do_statement></statements><symbol> } </symbol></if_statement><return_statement><keyword> return </keyword><symbol> ; </symbol></return_statement></statements><symbol> } </symbol></subroutine_body></subroutine_dec><subroutine_dec><keyword> method </keyword><keyword> void </keyword><identifier> moveUp </identifier><symbol> ( </symbol><parameter_list /><symbol> ) </symbol><subroutine_body><symbol> { </symbol><statements><if_statement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier> y </identifier></term><symbol> &gt; </symbol><term><integer_constant> 1 </integer_constant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><do_statement><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><expression_list><expression><term><keyword> false </keyword></term></expression></expression_list><symbol> ) </symbol><symbol> ; </symbol></do_statement><do_statement><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><expression_list><expression><term><identifier> x </identifier></term></expression><symbol> , </symbol><expression><term><symbol> ( </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> ) </symbol></term><symbol> - </symbol><term><integer_constant> 1 </integer_constant></term></expression><symbol> , </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression></expression_list><symbol> ) </symbol><symbol> ; </symbol></do_statement><let_statement><keyword> let </keyword><identifier> y </identifier><symbol> = </symbol><expression><term><identifier> y </identifier></term><symbol> - </symbol><term><integer_constant> 2 </integer_constant></term></expression><symbol> ; </symbol></let_statement><do_statement><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><expression_list><expression><term><keyword> true </keyword></term></expression></expression_list><symbol> ) </symbol><symbol> ; </symbol></do_statement><do_statement><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><expression_list><expression><term><identifier> x </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term></expression><symbol> , </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><integer_constant> 1 </integer_constant></term></expression></expression_list><symbol> ) </symbol><symbol> ; </symbol></do_statement></statements><symbol> } </symbol></if_statement><return_statement><keyword> return </keyword><symbol> ; </symbol></return_statement></statements><symbol> } </symbol></subroutine_body></subroutine_dec><subroutine_dec><keyword> method </keyword><keyword> void </keyword><identifier> moveDown </identifier><symbol> ( </symbol><parameter_list /><symbol> ) </symbol><subroutine_body><symbol> { </symbol><statements><if_statement><keyword> if </keyword><symbol> ( </symbol><expression><term><symbol> ( </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> ) </symbol></term><symbol> &lt; </symbol><term><integer_constant> 254 </integer_constant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><do_statement><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><expression_list><expression><term><keyword> false </keyword></term></expression></expression_list><symbol> ) </symbol><symbol> ; </symbol></do_statement><do_statement><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><expression_list><expression><term><identifier> x </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term></expression><symbol> , </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><integer_constant> 1 </integer_constant></term></expression></expression_list><symbol> ) </symbol><symbol> ; </symbol></do_statement><let_statement><keyword> let </keyword><identifier> y </identifier><symbol> = </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><integer_constant> 2 </integer_constant></term></expression><symbol> ; </symbol></let_statement><do_statement><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><expression_list><expression><term><keyword> true </keyword></term></expression></expression_list><symbol> ) </symbol><symbol> ; </symbol></do_statement><do_statement><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><expression_list><expression><term><identifier> x </identifier></term></expression><symbol> , </symbol><expression><term><symbol> ( </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> ) </symbol></term><symbol> - </symbol><term><integer_constant> 1 </integer_constant></term></expression><symbol> , </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression></expression_list><symbol> ) </symbol><symbol> ; </symbol></do_statement></statements><symbol> } </symbol></if_statement><return_statement><keyword> return </keyword><symbol> ; </symbol></return_statement></statements><symbol> } </symbol></subroutine_body></subroutine_dec><subroutine_dec><keyword> method </keyword><keyword> void </keyword><identifier> moveLeft </identifier><symbol> ( </symbol><parameter_list /><symbol> ) </symbol><subroutine_body><symbol> { </symbol><statements><if_statement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier> x </identifier></term><symbol> &gt; </symbol><term><integer_constant> 1 </integer_constant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><do_statement><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><expression_list><expression><term><keyword> false </keyword></term></expression></expression_list><symbol> ) </symbol><symbol> ; </symbol></do_statement><do_statement><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><expression_list><expression><term><symbol> ( </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> ) </symbol></term><symbol> - </symbol><term><integer_constant> 1 </integer_constant></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term></expression><symbol> , </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression></expression_list><symbol> ) </symbol><symbol> ; </symbol></do_statement><let_statement><keyword> let </keyword><identifier> x </identifier><symbol> = </symbol><expression><term><identifier> x </identifier></term><symbol> - </symbol><term><integer_constant> 2 </integer_constant></term></expression><symbol> ; </symbol></let_statement><do_statement><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><expression_list><expression><term><keyword> true </keyword></term></expression></expression_list><symbol> ) </symbol><symbol> ; </symbol></do_statement><do_statement><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><expression_list><expression><term><identifier> x </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term></expression><symbol> , </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><integer_constant> 1 </integer_constant></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression></expression_list><symbol> ) </symbol><symbol> ; </symbol></do_statement></statements><symbol> } </symbol></if_statement><return_statement><keyword> return </keyword><symbol> ; </symbol></return_statement></statements><symbol> } </symbol></subroutine_body></subroutine_dec><subroutine_dec><keyword> method </keyword><keyword> void </keyword><identifier> moveRight </identifier><symbol> ( </symbol><parameter_list /><symbol> ) </symbol><subroutine_body><symbol> { </symbol><statements><if_statement><keyword> if </keyword><symbol> ( </symbol><expression><term><symbol> ( </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> ) </symbol></term><symbol> &lt; </symbol><term><integer_constant> 510 </integer_constant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><do_statement><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><expression_list><expression><term><keyword> false </keyword></term></expression></expression_list><symbol> ) </symbol><symbol> ; </symbol></do_statement><do_statement><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><expression_list><expression><term><identifier> x </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term></expression><symbol> , </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><integer_constant> 1 </integer_constant></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression></expression_list><symbol> ) </symbol><symbol> ; </symbol></do_statement><let_statement><keyword> let </keyword><identifier> x </identifier><symbol> = </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><integer_constant> 2 </integer_constant></term></expression><symbol> ; </symbol></let_statement><do_statement><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><expression_list><expression><term><keyword> true </keyword></term></expression></expression_list><symbol> ) </symbol><symbol> ; </symbol></do_statement><do_statement><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><expression_list><expression><term><symbol> ( </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> ) </symbol></term><symbol> - </symbol><term><integer_constant> 1 </integer_constant></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term></expression><symbol> , </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression></expression_list><symbol> ) </symbol><symbol> ; </symbol></do_statement></statements><symbol> } </symbol></if_statement><return_statement><keyword> return </keyword><symbol> ; </symbol></return_statement></statements><symbol> } </symbol></subroutine_body></subroutine_dec><symbol> } </symbol></class>