<class><keyword> class </keyword><identifier> SquareGame </identifier><symbol> { </symbol><class_var_dec><keyword> field </keyword><identifier> Square </identifier><identifier> square </identifier><symbol> ; </symbol></class_var_dec><class_var_dec><keyword> field </keyword><keyword> int </keyword><identifier> direction </identifier><symbol> ; </symbol></class_var_dec><subroutine_dec><keyword> constructor </keyword><identifier> SquareGame </identifier><identifier> new </identifier><symbol> ( </symbol><parameter_list /><symbol> ) </symbol><subroutine_body><symbol> { </symbol><statements><let_statement><keyword> let </keyword><identifier> square </identifier><symbol> = </symbol><expression><term><identifier> Square </identifier><symbol> . </symbol><identifier> new </identifier><symbol> ( </symbol><expression_list><expression><term><integer_constant> 0 </integer_constant></term></expression><symbol> , </symbol><expression><term><integer_constant> 0 </integer_constant></term></expression><symbol> , </symbol><expression><term><integer_constant> 30 </integer_constant></term></expression></expression_list><symbol> ) </symbol></term></expression><symbol> ; </symbol></let_statement><let_statement><keyword> let </keyword><identifier> direction </identifier><symbol> = </symbol><expression><term><integer_constant> 0 </integer_constant></term></expression><symbol> ; </symbol></let_statement><return_statement><keyword> return </keyword><expression><term><keyword> this </keyword></term></expression><symbol> ; </symbol></return_statement></statements><symbol> } </symbol></subroutine_body></subroutine_dec><subroutine_dec><keyword> method </keyword><keyword> void </keyword><identifier> dispose </identifier><symbol> ( </symbol><parameter_list /><symbol> ) </symbol><subroutine_body><symbol> { </symbol><statements><do_statement><keyword> do </keyword><identifier> square </identifier><symbol> . </symbol><identifier> dispose </identifier><symbol> ( </symbol><expression_list /><symbol> ) </symbol><symbol> ; </symbol></do_statement><do_statement><keyword> do </keyword><identifier> Memory </identifier><symbol> . </symbol><identifier> deAlloc </identifier><symbol> ( </symbol><expression_list><expression><term><keyword> this </keyword></term></expression></expression_list><symbol> ) </symbol><symbol> ; </symbol></do_statement><return_statement><keyword> return </keyword><symbol> ; </symbol></return_statement></statements><symbol> } </symbol></subroutine_body></subroutine_dec><subroutine_dec><keyword> method </keyword><keyword> void </keyword><identifier> run </identifier><symbol> ( </symbol><parameter_list /><symbol> ) </symbol><subroutine_body><symbol> { </symbol><var_dec><keyword> var </keyword><keyword> char </keyword><identifier> key </identifier><symbol> ; </symbol></var_dec><var_dec><keyword> var </keyword><keyword> boolean </keyword><identifier> exit </identifier><symbol> ; </symbol></var_dec><statements><let_statement><keyword> let </keyword><identifier> exit </identifier><symbol> = </symbol><expression><term><keyword> false </keyword></term></expression><symbol> ; </symbol></let_statement><while_statement><keyword> while </keyword><symbol> ( </symbol><expression><term><symbol> ~ </symbol><term><identifier> exit </identifier></term></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><while_statement><keyword> while </keyword><symbol> ( </symbol><expression><term><identifier> key </identifier></term><symbol> = </symbol><term><integer_constant> 0 </integer_constant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><let_statement><keyword> let </keyword><identifier> key </identifier><symbol> = </symbol><expression><term><identifier> Keyboard </identifier><symbol> . </symbol><identifier> keyPressed </identifier><symbol> ( </symbol><expression_list /><symbol> ) </symbol></term></expression><symbol> ; </symbol></let_statement><do_statement><keyword> do </keyword><identifier> moveSquare </identifier><symbol> ( </symbol><expression_list /><symbol> ) </symbol><symbol> ; </symbol></do_statement></statements><symbol> } </symbol></while_statement><if_statement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier> key </identifier></term><symbol> = </symbol><term><integer_constant> 81 </integer_constant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><let_statement><keyword> let </keyword><identifier> exit </identifier><symbol> = </symbol><expression><term><keyword> true </keyword></term></expression><symbol> ; </symbol></let_statement></statements><symbol> } </symbol></if_statement><if_statement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier> key </identifier></term><symbol> = </symbol><term><integer_constant> 90 </integer_constant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><do_statement><keyword> do </keyword><identifier> square </identifier><symbol> . </symbol><identifier> decSize </identifier><symbol> ( </symbol><expression_list /><symbol> ) </symbol><symbol> ; </symbol></do_statement></statements><symbol> } </symbol></if_statement><if_statement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier> key </identifier></term><symbol> = </symbol><term><integer_constant> 88 </integer_constant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><do_statement><keyword> do </keyword><identifier> square </identifier><symbol> . </symbol><identifier> incSize </identifier><symbol> ( </symbol><expression_list /><symbol> ) </symbol><symbol> ; </symbol></do_statement></statements><symbol> } </symbol></if_statement><if_statement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier> key </identifier></term><symbol> = </symbol><term><integer_constant> 131 </integer_constant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><let_statement><keyword> let </keyword><identifier> direction </identifier><symbol> = </symbol><expression><term><integer_constant> 1 </integer_constant></term></expression><symbol> ; </symbol></let_statement></statements><symbol> } </symbol></if_statement><if_statement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier> key </identifier></term><symbol> = </symbol><term><integer_constant> 133 </integer_constant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><let_statement><keyword> let </keyword><identifier> direction </identifier><symbol> = </symbol><expression><term><integer_constant> 2 </integer_constant></term></expression><symbol> ; </symbol></let_statement></statements><symbol> } </symbol></if_statement><if_statement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier> key </identifier></term><symbol> = </symbol><term><integer_constant> 130 </integer_constant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><let_statement><keyword> let </keyword><identifier> direction </identifier><symbol> = </symbol><expression><term><integer_constant> 3 </integer_constant></term></expression><symbol> ; </symbol></let_statement></statements><symbol> } </symbol></if_statement><if_statement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier> key </identifier></term><symbol> = </symbol><term><integer_constant> 132 </integer_constant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><let_statement><keyword> let </keyword><identifier> direction </identifier><symbol> = </symbol><expression><term><integer_constant> 4 </integer_constant></term></expression><symbol> ; </symbol></let_statement></statements><symbol> } </symbol></if_statement><while_statement><keyword> while </keyword><symbol> ( </symbol><expression><term><symbol> ~ </symbol><term><symbol> ( </symbol><expression><term><identifier> key </identifier></term><symbol> = </symbol><term><integer_constant> 0 </integer_constant></term></expression><symbol> ) </symbol></term></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><let_statement><keyword> let </keyword><identifier> key </identifier><symbol> = </symbol><expression><term><identifier> Keyboard </identifier><symbol> . </symbol><identifier> keyPressed </identifier><symbol> ( </symbol><expression_list /><symbol> ) </symbol></term></expression><symbol> ; </symbol></let_statement><do_statement><keyword> do </keyword><identifier> moveSquare </identifier><symbol> ( </symbol><expression_list /><symbol> ) </symbol><symbol> ; </symbol></do_statement></statements><symbol> } </symbol></while_statement></statements><symbol> } </symbol></while_statement><return_statement><keyword> return </keyword><symbol> ; </symbol></return_statement></statements><symbol> } </symbol></subroutine_body></subroutine_dec><subroutine_dec><keyword> method </keyword><keyword> void </keyword><identifier> moveSquare </identifier><symbol> ( </symbol><parameter_list /><symbol> ) </symbol><subroutine_body><symbol> { </symbol><statements><if_statement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier> direction </identifier></term><symbol> = </symbol><term><integer_constant> 1 </integer_constant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><do_statement><keyword> do </keyword><identifier> square </identifier><symbol> . </symbol><identifier> moveUp </identifier><symbol> ( </symbol><expression_list /><symbol> ) </symbol><symbol> ; </symbol></do_statement></statements><symbol> } </symbol></if_statement><if_statement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier> direction </identifier></term><symbol> = </symbol><term><integer_constant> 2 </integer_constant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><do_statement><keyword> do </keyword><identifier> square </identifier><symbol> . </symbol><identifier> moveDown </identifier><symbol> ( </symbol><expression_list /><symbol> ) </symbol><symbol> ; </symbol></do_statement></statements><symbol> } </symbol></if_statement><if_statement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier> direction </identifier></term><symbol> = </symbol><term><integer_constant> 3 </integer_constant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><do_statement><keyword> do </keyword><identifier> square </identifier><symbol> . </symbol><identifier> moveLeft </identifier><symbol> ( </symbol><expression_list /><symbol> ) </symbol><symbol> ; </symbol></do_statement></statements><symbol> } </symbol></if_statement><if_statement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier> direction </identifier></term><symbol> = </symbol><term><integer_constant> 4 </integer_constant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><do_statement><keyword> do </keyword><identifier> square </identifier><symbol> . </symbol><identifier> moveRight </identifier><symbol> ( </symbol><expression_list /><symbol> ) </symbol><symbol> ; </symbol></do_statement></statements><symbol> } </symbol></if_statement><do_statement><keyword> do </keyword><identifier> Sys </identifier><symbol> . </symbol><identifier> wait </identifier><symbol> ( </symbol><expression_list><expression><term><integer_constant> 5 </integer_constant></term></expression></expression_list><symbol> ) </symbol><symbol> ; </symbol></do_statement><return_statement><keyword> return </keyword><symbol> ; </symbol></return_statement></statements><symbol> } </symbol></subroutine_body></subroutine_dec><symbol> } </symbol></class>