// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Determine instruction type
    Not(in=instruction[15], out=ains);
    Not(in=ains, out=cins);    

    // Do c-instruction
    
    // c-ins: comp
    Mux16(a=aout, b=inM, sel=instruction[12], out=y);
    ALU(x=dout, y=y, 
    zx=instruction[11], nx=instruction[10], zy=instruction[9], 
    ny=instruction[8], f=instruction[7], no=instruction[6], 
    out=cout, zr=zr, ng=ng, out=outM);

    // c-ins: dest
    
    // Set a register (do a-instruction)
    Mux16(a=cout, b=instruction, sel=ains, out=ain);
    Or(a=ains, b=instruction[5], out=loada); // d1
    ARegister(in=ain, load=loada, out=aout, out[0..14]=addressM);
    // Set d register
    And(a=instruction[4], b=cins, out=loadd); // d2
    DRegister(in=cout, load=loadd, out=dout);
    // Set writeM
    And(a=instruction[3], b=cins, out=writeM); // d3

    // c-ins: jump
    And(a=ng, b=instruction[2], out=jmp1); // j1
    And(a=zr, b=instruction[1], out=jmp2); // j2
    Or(a=zr, b=ng, out=notpos);
    Not(in=notpos, out=pos);
    And(a=pos, b=instruction[0], out=jmp3); // j3
    Or(a=jmp1, b=jmp2, out=jmp12);
    Or(a=jmp12, b=jmp3, out=jmp123);
    And(a=jmp123, b=cins, out=jump);

    // Update pc
    PC(in=aout, load=jump, inc=true, reset=reset, out[0..14]=pc);
}
















